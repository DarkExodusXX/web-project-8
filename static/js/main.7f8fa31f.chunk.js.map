{"version":3,"sources":["components/ErrorMessages/ErrorMessges.js","components/Popup/Popup.js","App.js","reportWebVitals.js","index.js"],"names":["ErrorMessages","errors","length","map","error","className","Popup","useState","setErrors","localStorage","getItem","username","setUsername","email","setEmail","message","setMessage","isChecked","setIsChecked","useEffect","setItem","toString","onSubmit","event","preventDefault","nameError","checkedError","messageError","errorsArr","test","includes","splice","indexOf","push","isFormValid","fetch","method","headers","body","JSON","stringify","then","response","status","clear","window","history","pushState","popStateEvent","PopStateEvent","dispatchEvent","catch","e","console","log","type","placeholder","onChange","target","value","rows","checked","App","location","pathname","url","setUrl","addEventListener","removeEventListener","onClick","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7f8fa31f.chunk.js","sourcesContent":["import React from 'react';\nimport './ErrorMessage.css';\n\nconst ErrorMessages = ({ errors }) => {\n  if (errors.length === 0) {\n    return null;\n  }\n  return errors.map(error => (\n    <li className='error' key={error}>{error}</li>\n  ));\n};\n\nexport default ErrorMessages;\n","import React, { useEffect, useState } from 'react';\nimport ErrorMessages from '../ErrorMessages/ErrorMessges';\nimport './popup.css';\n\nconst Popup = () => {\n  const [errors, setErrors] = useState([]);\n  const [username, setUsername] = useState(localStorage.getItem('username') || '');\n  const [email, setEmail] = useState(localStorage.getItem('email') || '');\n  const [message, setMessage] = useState(localStorage.getItem('message') || '');\n  const [isChecked, setIsChecked] = useState(localStorage.getItem('isChecked') === 'true' || false);\n  const fetchUrl = 'https://formcarry.com/s/nUdcDnvBy-';\n  \n  const isFormValid = () => {\n    const nameError = \"Имя должно состоять только из русских букв\";\n    const checkedError = \"Вы должны согласится с политикой обработки персональных данных\";\n    const messageError = \"Сообщение не должно быть пустым\";\n    const errorsArr = [...errors];\n    \n    if (!(/^[а-я]+$/i.test(username))) {\n      if (!errorsArr.includes(nameError)) {\n        errorsArr.push(nameError);\n        setErrors(errorsArr);\n      }\n    } else {\n      if (errorsArr.includes(nameError)) {\n        errorsArr.splice(errors.indexOf(nameError), 1);\n      }\n    }\n    if (!isChecked) {\n      if (!errorsArr.includes(checkedError)) {\n        errorsArr.push(checkedError);\n        setErrors(errorsArr)\n      }\n    } else {\n      if (errorsArr.includes(checkedError)) {\n        errorsArr.splice(errors.indexOf(checkedError), 1);\n      }\n    }\n    if (message.length === 0) {\n      if (!errorsArr.includes(messageError)) {\n        errorsArr.push(messageError);\n        setErrors(errorsArr)\n      }\n    } else {\n      if (errorsArr.includes(messageError)) {\n        errorsArr.splice(errors.indexOf(messageError), 1);\n      }\n    }\n    setErrors(errorsArr);\n    return errorsArr;\n  };\n  \n  const handleSubmit = (event) => {\n    event.preventDefault();\n    if (isFormValid().length > 0) return;\n    fetch(fetchUrl, {\n      method: 'POST',\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        username,\n        email,\n        message,\n        isChecked\n      })\n    }).then((response) => {\n      if (response.status === 200) {\n        localStorage.clear();\n        window.history.pushState(null, '', '/success');\n        const popStateEvent = new PopStateEvent('popstate', {});\n        dispatchEvent(popStateEvent);\n      } else {\n        window.history.pushState(null, '', '/error');\n        const popStateEvent = new PopStateEvent('popstate', {});\n        dispatchEvent(popStateEvent);\n      }\n    }).catch((e) => {\n      console.log(e);\n    });\n    \n  };\n  \n  useEffect(() => {\n    localStorage.setItem('username', username);\n    localStorage.setItem('email', email);\n    localStorage.setItem('message', message);\n    localStorage.setItem('isChecked', isChecked.toString());\n  }, [username, email, message, isChecked, errors]);\n  \n  return (\n    <div>\n      <div className='b-popup'>\n        <div className='b-popup-content'>\n          <h2>Заполните форму обратной связи</h2>\n          <ErrorMessages errors={errors}/>\n          <form className='container' onSubmit={handleSubmit}>\n            <div className='from-item'>\n              <input\n                type='text'\n                placeholder='Имя'\n                onChange={(e) => setUsername(e.target.value)}\n                value={username}\n              />\n            </div>\n            <div className='from-item'>\n              <input\n                type='email'\n                placeholder='Email'\n                onChange={(e) => setEmail(e.target.value)}\n                value={email}\n              />\n            </div>\n            <div className='from-item'>\n              <textarea\n                rows='10'\n                placeholder='Ваше сообщение'\n                onChange={(e) => setMessage(e.target.value)}\n                value={message}\n              />\n            </div>\n            <div className='from-item'>\n              <div className='checkbox-control'>\n                <input\n                  type='checkbox'\n                  onChange={(e) => setIsChecked(e.target.checked)}\n                  checked={isChecked}\n                /><span>Согласен с политикой обработки персональных данных</span>\n              </div>\n            </div>\n            <button type='submit'>Отправить</button>\n          </form>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Popup;\n","import './App.css';\nimport React, { useEffect, useState } from 'react';\nimport Popup from './components/Popup/Popup';\n\nconst App = () => {\n  const [url, setUrl] = useState(window.location.pathname);\n  \n  const handleClick = () => {\n    window.history.pushState({}, '', '/form');\n    const popStateEvent = new PopStateEvent('popstate', {});\n    dispatchEvent(popStateEvent);\n  };\n  \n  useEffect(() => {\n    window.addEventListener('popstate', function (e) {\n      setUrl(window.location.pathname);\n    });\n    return window.removeEventListener('popstate', null);\n  });\n  \n  \n  return (\n    <div className='App'>\n      {url === '/web-project-8/' && (\n        <>\n          <h1>Хотите связаться с нами?</h1>\n          <button onClick={handleClick}>Связаться</button>\n        </>\n      )}\n      {url === '/web-project-8/form' && (\n        <>\n          <Popup/>\n        </>\n      )}\n      {url === '/web-project-8/error' && (\n        <>\n          <h1>Произошла ошибка, попробуйсте позже</h1>\n        </>\n      )}\n      {url === '/web-project-8/success' && (\n        <>\n          <h1>Успешно отправленно</h1>\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App/>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}